1.  
什么是泛型程序设计?
    基于具有类属性的程序实体进行程序设计的技术称为：泛型程序设计（或类属程序设计，Generic Programming）。
泛型程序设计为我们提供了什么方便?
    使得我们能够通过一个函数对不同类型的参数完成相同的操作，实现参数多态化，使得一个程序实体能够对多种类型的数据进行操作，
大大简化了程序设计的工作，也增加了程序的可靠性
在定义和使用模板的时候有什么问题?
    ①当编译程序无法根据调用时的实参类型确定所调用的模板函数的时候，需要在程序中显式地实例化函数模板
    ②当函数模板带有非类型参数时，需要显式实例化
    ③类模板的实例化需要在程序中显式地指出
    ④类模板中的静态成员仅属于实例化后的类，不同类模板实例之间不共享类模板的静态成员
    ⑤关于类模板的友元见P23，最终实现不是讲某函数作为模板友元，也不是某模板函数作为类模板的友元，
而是讲模板函数实例作为类模板的友元，如下：
template <class T> void f3(A<T>& a);
template <class T>
class A{
    friend void f3<T>(A<T>& a);//f3和A一对一实例化，使用相同类型参数
};
    ⑥实例化一定要见到相应的源代码，否则无法实例化。同时，若在其他文件中出现了特定的实例化，
则当链接时能够找到对应的实例，从而不会出错，解决方法通常是把模板的定义和实现都放到头文件中
    ⑦模板的服用会导致多模块的编译结果中存在相同的实例，解决方法一般为由编译器来舍弃重复的实例化

2.


二
    1. C，what bout D??
    2. 
    (1)i->Print();
    (2)vector<A> v;

    3.
    (1)list<T>::iterator it1;
    (2)Myclass<string> obj(4);